# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

# topology definition
# name to be used when submitting
name: "part-D"

# TODO
# Task: implement your topology for part d

# topology configuration
# this will be passed to the submitter as a map of config options
config:
    storm.local.hostname: "localhost"
    topology.max.task.parallelism: 3
    # set this to true if you want to see more debug log
    # set it to false before submitting
    topology.debug: false
    # Hint: you can set input file path here
    # make sure it's "/tmp/data.txt" in your final submission

components:
  - id: "poolConfig"
    className: "org.apache.storm.redis.common.config.JedisPoolConfig"
    constructorArgs:
      - "localhost"
      - 6379
      - 2000
      - "uiuc_cs498_mp7"
      - 0

  # TODO
  # Task: implement the redis store mapper
  # src/main/java/edu/illinois/storm/TopNStoreMapper.java
  # redis hash key for part D is "partDTopN"
  - id: "storeMapper"
    className: "edu.illinois.storm.TopNStoreMapper"
    constructorArgs:
      - "partDTopN"

# spout definitions
spouts:
  # Hint: the new file reading spout you need implement in this part is
  # src/main/java/edu/illinois/storm/FileReaderSpout.java
  # You need to pass file name here using <withInputFileProperties> function
  - id: "file-reader-spout"
    className: "edu.illinois.storm.FileReaderSpout"
    configMethods:
      - name: "withInputFileProperties"
        args:
          - "/tmp/data.txt"
    parallelism: 1

# bolt definitions
bolts:
  # Hint: the new top N tracking bolt you need implement in this part is
  # src/main/java/edu/illinois/storm/TopNFinderBolt.java
  # You need to pass N to the bolt here using <withNProperties> function
  # make sure it's 10 in your final submission
  - id: "split-bolt"
    className: "edu.illinois.storm.SplitSentenceBolt"
    parallelism: 1

  - id: "normalizer-bolt"
    className: "edu.illinois.storm.NormalizerBolt"
    parallelism: 1

  - id: "count-bolt"
    className: "edu.illinois.storm.WordCountBolt"
    parallelism: 1

  - id: "top-n-bolt"
    className: "edu.illinois.storm.TopNFinderBolt"
    configMethods:
      - name: "withNProperties"
        args:
          - "10"
    parallelism: 1
  - id: "store-bolt"
    className: "org.apache.storm.redis.bolt.RedisStoreBolt"
    constructorArgs:
      - ref: "poolConfig"
      - ref: "storeMapper"
    parallelism: 1

# stream definitions
# stream definitions define connections between spouts and bolts.
streams:
  - name: "file-reader-spout --> split-bolt"
    from: "file-reader-spout"
    to: "split-bolt"
    grouping:
      type: SHUFFLE

  - name: "split-bolt --> normalizer-bolt"
    from: "split-bolt"
    to: "normalizer-bolt"
    grouping:
      type: SHUFFLE

  - name: "normalizer-bolt --> count-bolt"
    from: "normalizer-bolt"
    to: "count-bolt"
    grouping:
      type: FIELDS
      args: ["word"]

  - name: "count-bolt --> top-n-bolt"
    from: "count-bolt"
    to: "top-n-bolt"
    grouping:
      type: SHUFFLE

  - name: "top-n-bolt --> store-bolt"
    from: "top-n-bolt"
    to: "store-bolt"
    grouping:
      type: SHUFFLE
